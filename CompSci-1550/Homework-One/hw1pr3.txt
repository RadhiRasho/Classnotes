# CSCI1550 hw1pr3
# Filename: hw1pr3.txt
# Name: Radhi Rasho


# Exercise 1: Warm-up: Binary to Decimal

// The following is a snippet of code from the Python REPL that demonstrates how to convert a binary number to a decimal number.

Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 0b101010
>>> x
42
>>> 

// This snippet of code is for the Task

Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 0b11101
>>> x
29
>>> x = 0b00000111
>>> x
7
>>> x = 0b111
>>> x
7
>>> x = 0b11100111
>>> x
231
>>> 

// Exercise 2:   Other bases to Decimal

// Task: Convert the following numbers to decimal:
// A. 2fab_16 to decimal
// B. 417_8 to decimal
// C. 21201_3 to decimal

// A. 2fab_16 to decimal
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 0x2fab
>>> x
12203

// B. 417_8 to decimal
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = 0o417
>>> x
271

// C. 21201_3 to decimal
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> x = int("21201", 3)
>>> x
208

// Exercise 3: Converting Decimal numbers to Binary!

// Task: Convert the following decimal numbers to binary:
// (a) 77_10 to binary
// (b) 351_10 in binary
// (c) 2_10 in binary
// (d) 7_10 in binary
// To make life a little easier, turns out Python has a built-in function called "bin" that can convert decimal numbers to binary numbers.

// Answers:
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> bin(77)
'0b1001101'
>>> bin(351)
'0b101011111'
>>> bin(2)
'0b10'
>>> bin(7)
'0b111'


// Exercise 4:  Converting from decimal to other bases

// Task: Convert the following decimal numbers to the given bases:
// (a) 215_10 to base 8
// (b) 666_10 to base 16

// Yet again Python has a built-in function that can convert decimal numbers to other bases. The function is called "oct" for base 8 and "hex" for base 16.

// Answers:
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> oct(215)
'0o327'
>>> hex(666)
'0x29a'
>>> 

// The Math-y way of doing it
// (a) 215_10 to base 8
// 215 / 8 = 26 remainder 7
// 26 / 8 = 3 remainder 2
// 3 / 8 = 0 remainder 3
// So, 215_10 = 327_8

// (b) 666_10 to base 16
// 666 / 16 = 41 remainder 10 (A), the number 10 in hexadecimal is the letter A
// 41 / 16 = 2 remainder 9
// 2 / 16 = 0 remainder 2
// So, 666_10 = 29A_16

// Exercise 5: Translating binary representations of single-precision floating point numbers
// (a) Convert the following sequence of 32 bits to decimal: 
01001001100111101000000000000000
// (b) Convert the following sequence of 32 bits to decimal: 
10100111111001100110000000000000

// Answers:
Python 3.12.8 | packaged by Anaconda, Inc. | (main, Dec 11 2024, 16:31:09) [GCC 11.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 0b01001001100111101000000000000000  
1235124224
>>> 
>>> 0b10100111111001100110000000000000
2816892928
>>> 

// The Math-y way of doing it
// (a) Convert the following sequence of 32 bits to decimal:
// 0b01001001100111101000000000000000
     ^ this first bit tells us it's positive
(1×2^30)+(1×2^27)+(1×2^24)+(1×2^23)+(1×2^20)+(1×2^19)+(1×2^18)+(1×2^17)+(1×2^15) = 1235124224

// (b) Convert the following sequence of 32 bits to decimal:
// 0b10100111111001100110000000000000
     ^ this first bit tells us it's negative

(1*2^31)+(1*2^29)+(1*2^26)+(1*2^25)+(1*2^24)+(1*2^23)+(1*2^22)+(1*2^21)+(1*2^18)+(1*2^17)+(1*2^14)+(1*2^13) = -1478074368